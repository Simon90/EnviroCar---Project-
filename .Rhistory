xd <- cbind(xd[1:(npts - 1)], xd[2:npts])
the.curve <- apply(xd, 1, function(z) {
indx <- z[1]:z[2]
data.frame(with(the.curve[indx, ], cbind(x = approx(x, n = ninterp)$y, y = approx(y,
n = ninterp)$y)))
})
the.curve <- do.call(rbind, the.curve)
random.curve <- function(npts, len.out, rseed = NA) {
# Generates decently smooth random series for widths and heights
if (!is.na(rseed)) {
set.seed(rseed)
}
findx <- 2:(npts + 1)
y <- as.vector(arima.sim(n = npts + 2, list(ar = c(0.5, 0.4), sd = 1)))
y <- filter(y, filter = rep(1, 3))[findx]
y <- (y - min(y))/diff(range(y))
y <- spline(y, n = len.out, method = "fmm")$y
return(y)
}
thickness <- random.curve(npts, length(the.curve$x), rseed = rseed)
the.curve <- cbind(the.curve, thickness)
col.scale <- random.curve(npts, length(the.curve$x), rseed = rseed)
the.curve <- cbind(the.curve, col.scale)
the.plot <- autoplot(map, expand=FALSE)
#the.plot <- the.plot + ggplot(the.curve)
aes.def <- aes(x = x, y = y, colour = col.scale, size = thickness)
the.plot <- the.plot + geom_path(aes.def, aes = aes.def)
the.plot
the.plot <- autoplot(map, expand=FALSE)
the.plot
autoplot(map, expand=FALSE)
autoplot(map)
the.plot <- autoplot(map)
the.plot
map <- openmap(c(bbox[4], bbox[1]), c(bbox[2], bbox[3]), type = "osm")
map <- openproj(map, longlat())
map
plot(map)
autoplot(map)
the.plot <- autoplot(map)
#the.plot <- the.plot + ggplot(the.curve)
aes.def <- aes(x = x, y = y, colour = col.scale, size = thickness)
the.plot <- the.plot + geom_path(aes.def, aes = aes.def)
the.plot
thick.range <- c(0.2, 10)
the.plot <- the.plot + scale_colour_gradient(low = "yellow", high = "lawngreen",
guide = "none")
the.plot <- the.plot + scale_size(range = thick.range, guide = "none")
the.plot <- the.plot + geom_point(data = xy, mapping = aes(x = x, y = y), size = 2 +
4 * runif(npts), pch = 21, colour = "black", fill = "orange")
the.plot
new_theme_empty <- theme_bw()
# new_theme_empty$rect <- element_blank() # for blank (white) background
new_theme_empty$panel.background <- element_rect(fill = "gray80", color = NA)
new_theme_empty$panel.border <- element_blank()
new_theme_empty$line <- element_blank()
new_theme_empty$strip.text <- element_blank()
new_theme_empty$axis.text <- element_blank()
new_theme_empty$plot.title <- element_blank()
new_theme_empty$axis.title <- element_blank()
new_theme_empty$plot.margin <- structure(c(0, 0, -1, -1), unit = "lines", valid.unit = 3L,
class = "unit")
the.plot <- the.plot + new_theme_empty
x11()
print(the.plot)
the.plot <- autoplot(map)
the.plot <- the.plot + ggplot(the.curve)
ggplot(the.curve)
?ggplot
ggplot2(the.curve)
the.curve$x
the.plot <- autoplot(map)
#the.plot <- the.plot + ggplot(the.curve)
aes.def <- aes(x = the.curve$x, y = the.curve$y, colour = col.scale, size = thickness)
the.plot <- the.plot + geom_path(aes.def, aes = aes.def)
the.plot
thick.range <- c(0.2, 10)
the.plot <- the.plot + scale_colour_gradient(low = "yellow", high = "lawngreen",
guide = "none")
the.plot <- the.plot + scale_size(range = thick.range, guide = "none")
the.plot <- the.plot + geom_point(data = xy, mapping = aes(x = x, y = y), size = 2 +
4 * runif(npts), pch = 21, colour = "black", fill = "orange")
new_theme_empty <- theme_bw()
# new_theme_empty$rect <- element_blank() # for blank (white) background
new_theme_empty$panel.background <- element_rect(fill = "gray80", color = NA)
new_theme_empty$panel.border <- element_blank()
new_theme_empty$line <- element_blank()
new_theme_empty$strip.text <- element_blank()
new_theme_empty$axis.text <- element_blank()
new_theme_empty$plot.title <- element_blank()
new_theme_empty$axis.title <- element_blank()
new_theme_empty$plot.margin <- structure(c(0, 0, -1, -1), unit = "lines", valid.unit = 3L,
class = "unit")
the.plot <- the.plot + new_theme_empty
x11()
print(the.plot)
png()
png(map)
?png
map2 <- png(map.png)
png(map.png)
dev.off()
png(map.png)
png("map.png")
plot(map)
dev.off()
getwd()
map2 <- png("map.png")
plot(map)
dev.off()
map2
plot(map2)
plotRGB(map2)
map_img <- readPNG("map.png")
install.packages("png")
require(grid)
require(png)
map_img <- readPNG("map.png")
map_img <- rasterGrob(img, interpolate=TRUE)
map_img <- rasterGrob(map_img, interpolate=TRUE)
map_img
plot(map_img)
?
rasterGrob
print(map_img)
the.plot <- ggplot(the.curve)
aes.def <- aes(x = x, y = y, colour = col.scale, size = thickness)
the.plot <- the.plot + geom_path(aes.def, aes = aes.def) + + annotation_custom(map_img, xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf)
the.plot <- ggplot(the.curve)
aes.def <- aes(x = x, y = y, colour = col.scale, size = thickness)
the.plot <- the.plot + geom_path(aes.def, aes = aes.def) + annotation_custom(map_img, xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf)
thick.range <- c(0.2, 10)
the.plot <- the.plot + scale_colour_gradient(low = "yellow", high = "lawngreen",
guide = "none")
the.plot <- the.plot + scale_size(range = thick.range, guide = "none")
the.plot <- the.plot + geom_point(data = xy, mapping = aes(x = x, y = y), size = 2 +
4 * runif(npts), pch = 21, colour = "black", fill = "orange")
new_theme_empty <- theme_bw()
# new_theme_empty$rect <- element_blank() # for blank (white) background
new_theme_empty$panel.background <- element_rect(fill = "gray80", color = NA)
new_theme_empty$panel.border <- element_blank()
new_theme_empty$line <- element_blank()
new_theme_empty$strip.text <- element_blank()
new_theme_empty$axis.text <- element_blank()
new_theme_empty$plot.title <- element_blank()
new_theme_empty$axis.title <- element_blank()
new_theme_empty$plot.margin <- structure(c(0, 0, -1, -1), unit = "lines", valid.unit = 3L,
class = "unit")
the.plot <- the.plot + new_theme_empty
x11()
print(the.plot)
the.plot <- ggplot(the.curve) + annotation_custom(map_img, xmin=-Inf, xmax=Inf, ymin=-Inf, ymax=Inf)
aes.def <- aes(x = x, y = y, colour = col.scale, size = thickness)
the.plot <- the.plot + geom_path(aes.def, aes = aes.def)
thick.range <- c(0.2, 10)
the.plot <- the.plot + scale_colour_gradient(low = "yellow", high = "lawngreen",
guide = "none")
the.plot <- the.plot + scale_size(range = thick.range, guide = "none")
the.plot <- the.plot + geom_point(data = xy, mapping = aes(x = x, y = y), size = 2 +
4 * runif(npts), pch = 21, colour = "black", fill = "orange")
new_theme_empty <- theme_bw()
# new_theme_empty$rect <- element_blank() # for blank (white) background
new_theme_empty$panel.background <- element_rect(fill = "gray80", color = NA)
new_theme_empty$panel.border <- element_blank()
new_theme_empty$line <- element_blank()
new_theme_empty$strip.text <- element_blank()
new_theme_empty$axis.text <- element_blank()
new_theme_empty$plot.title <- element_blank()
new_theme_empty$axis.title <- element_blank()
new_theme_empty$plot.margin <- structure(c(0, 0, -1, -1), unit = "lines", valid.unit = 3L,
class = "unit")
the.plot <- the.plot + new_theme_empty
x11()
print(the.plot)
ma <- arima.sim(n = 1000, list(ma=rep(1,10)))
plot(ma)
acf_ma <- acf(ma)
remainder <- stl(co2,s.window = "per")$time.series[,"remainder"]
ar(remainder)
plot(ar(remainder))
str(ar(remainder))
plot(stl(co2,s.window = "per"))
?stl
(co2,s.window = "per")
stl(co2,s.window = "per")
co2
stl(co2,s.window = "per")
315.42 - 315.1954 -0.06100103
315.42 - (315.1954 -0.06100103)
315.42 -(-0.06100103)-0.2856440966
?arima.sim
?ar
a3 <- arima.sim (n=10000, list(ar=c(0.7,0.15,0.05)))
a3
?fit
ar.mle(a3)
ar(a3)
a3 <- arima.sim (n=10000, list(ar=c(0.7,0.15,0.05)))
ar(a3)
ar.mle(a3)
ar.mle(a3, aic=F)
ar.mle(a3, aic=F, order.max=3)
ar.mle(a3, aic=F, order.max=3, demean=F)
ar.mle(a3, aic=F, demean=F)
?arima.sim
ts.plot(a3)
ts.plot(ar(a3))
?ar
?ar
a3 <- arima.sim (n=10000, list(ar=c(0.7,0.15,0.05)))
ar(a3)
ar(a3, aic = FALSE, order.max = 3)
a3 <- arima.sim (n=10000, list(ar=c(0.7,0.15,0.05)))
ar(a3)
ar(a3, aic = FALSE, order.max = 3)
plot(stl(co2,s.window = "per"))
stl(co2,s.window = "per")
co2
stl(co2,s.window = "per")
315.42 -(-0.06100103)-0.2856440966
315.42 -(-0.06100103)-0.2856440966
?stl
?stl
library("trajectories", lib.loc="D:/Program Files/R/R-3.1.1/library")
library("fuzzyMM", lib.loc="D:/Program Files/R/R-3.1.1/library")
install.packages("D:/Dropbox/UNI/R-Programming/map3d_1.0.tar.gz", repos = NULL, type = "source")
library("map3d", lib.loc="D:/Program Files/R/R-3.1.1/library")
demo(pck="map3d")
demo("map3d")
install.packages("rjson")
library("map3d", lib.loc="D:/Program Files/R/R-3.1.1/library")
library("enviroCaR", lib.loc="D:/Program Files/R/R-3.1.1/library")
demo(importDemo)
str(track@tracksCollection[[1]]@tracks[[1]]@sp)
str(tracks@tracksCollection[[1]]@tracks[[1]]@sp)
str(tracks@tracksCollection[[1]]@tracks[[1]])
spplot3d(tracks@tracksCollection[[1]]@tracks[[1]]@sp)
data <- tracks@tracksCollection[[1]]@tracks[[1]]@data
track1 <- tracks@tracksCollection[[1]]@tracks[[1]]@sp
proj4string(track1)
track1 <- SpatialPointsDataFrame(coordinates(track1), data, proj4string=proj4string(track1))
track1 <- SpatialPointsDataFrame(coordinates(track1), data, proj4string=proj4string(track1), bbox=bbox(track1))
coordinates(track1)
nrow(data)
track1 <- SpatialPointsDataFrame(coordinates(track1), data, proj4string=proj4string(track1), bbox=bbox(track1). match.ID = F)
track1 <- SpatialPointsDataFrame(coordinates(track1), data, proj4string=proj4string(track1), bbox=bbox(track1), match.ID = F)
bbox(track1)
proj4string(track1)
track1 <- SpatialPointsDataFrame(track1, data, proj4string=proj4string(track1), bbox=bbox(track1), match.ID = F)
class(track1)
spplot(track1)
library("enviroCaR", lib.loc="D:/Program Files/R/R-3.1.1/library")
library("map3d", lib.loc="D:/Program Files/R/R-3.1.1/library")
str(tracks@tracksCollection[[1]]@tracks[[1]]@sp)
str(tracks@tracksCollection[[1]]@tracks[[1]])
spplot3d(tracks@tracksCollection[[1]]@tracks[[1]]@sp)
data <- tracks@tracksCollection[[1]]@tracks[[1]]@data
importSingleTrack("envirocar.org/api/stable/", 545aa4f4e4b0b53890a2e62c, verbose = FALSE)
importSingleTrack("envirocar.org/api/stable/", "545aa4f4e4b0b53890a2e62c", verbose = FALSE)
importSingleTrack("envirocar.org/api/stable/tracks/", "545aa4f4e4b0b53890a2e62c", verbose = FALSE)
importSingleTrack("envirocar.org/api/stable/tracks/", 545aa4f4e4b0b53890a2e62c, verbose = FALSE)
importSingleTrack("envirocar.org/api/stable", 545aa4f4e4b0b53890a2e62c, verbose = FALSE)
importSingleTrack("envirocar.org/api/stable", 545aa4f4e4b0b53890a2e62c)
importSingleTrack("envirocar.org/api/stable", "545aa4f4e4b0b53890a2e62c")
importSingleTrack("envirocar.org/api/stable", "541be490e4b015877e6c567d")
?paste
?getURL
getTrackIDs("envirocar.org/api/stable")
importSingleTrack("https://envirocar.org/api/stable", "541be490e4b015877e6c567d")
track <- importSingleTrack("https://envirocar.org/api/stable", "541be490e4b015877e6c567d")
spplot3d(tracks@tracks[[1]]@sp)
str(track)
tracks@tracks[[1]]@sp
spplot3d(track@tracks[[1]]@sp)
data <- track@tracks[[1]]@data
track1 <- track@tracks[[1]]@sp
track1 <- SpatialPointsDataFrame(track1, data, proj4string=proj4string(track1), bbox=bbox(track1))
plot(track1)
names(data)
spplot3d(track1, "CO2")
library("fuzzyMM", lib.loc="D:/Program Files/R/R-3.1.1/library")
data(traj)
matched_traj <- mm(traj, plot = TRUE)
track <- importSingleTrack("https://envirocar.org/api/stable", "5457b694e4b0b53890a24096")
spplot3d(track@tracks[[1]]@sp)
track <- importSingleTrack("https://envirocar.org/api/stable", "54215afce4b015877e6db07b")
spplot3d(track@tracks[[1]]@sp)
track <- importSingleTrack("https://envirocar.org/api/stable", "5434f56de4b015877e9d4089")
spplot3d(track@tracks[[1]]@sp)
str(track)
track <- importSingleTrack("https://envirocar.org/api/stable", "53b5228ee4b01607fa566b78")
spplot3d(track@tracks[[1]]@sp)
data <- track@tracks[[1]]@data
track1 <- track@tracks[[1]]@sp
track1 <- SpatialPointsDataFrame(track1, data, proj4string=proj4string(track1), bbox=bbox(track1))
spplot3d(track1, "CO2")
spplot3d(track1, "Speed")
data
View(data)
spplot3d(track1, "GPS.Speed")
stplot(track)
library("spacetime", lib.loc="D:/Program Files/R/R-3.1.1/library")
stplot(track)
require(enviroCaR)
require(fuzzyMM)
require(map3d)
track <- importSingleTrack("https://envirocar.org/api/stable", "53b5228ee4b01607fa566b78")
spplot3d(track@tracks[[1]]@sp)
data <- track@tracks[[1]]@data
track1 <- track@tracks[[1]]@sp
track1 <- SpatialPointsDataFrame(track1, data, proj4string=proj4string(track1), bbox=bbox(track1))
spplot3d(track1, "GPS.Speed")
test
install.packages("devtools")
pkgs <- c("slidify", "slidifyLibraries", "rCharts")
devtools::install_github(pkgs, "ramnathv")
find_rtools()
library("devtools", lib.loc="D:/Program Files/R/R-3.1.1/library")
find_rtools()
library(slidify )
library(slidify)
devtools::install_github(pkgs, "ramnathv/slidify ")
devtools::install_github(pkgs, "ramnathv/slidify")
library("slidify", lib.loc="D:/Program Files/R/R-3.1.1/library")
slidify("index.Rmd")
slidify("C:/Users/Niko/Documents/GitHub/EnviroCar---Project-/index.Rmd")
library("slidify", lib.loc="D:/Program Files/R/R-3.1.1/library")
slidify("C:/Users/Niko/Documents/GitHub/EnviroCar---Project-/index.Rmd")
slidify("C:/Users/Niko/Documents/GitHub/EnviroCar---Project-/index.Rmd")
?xyplot
slidify("C:/Users/Niko/Documents/GitHub/EnviroCar---Project-/index.Rmd")
?stplot
bbox(trcol)
bbox(trcol),1
bbox(trcol)[,1]
bbox(trcol)[1,]
class(bbox(trcol)[1,])
slidify("C:/Users/Niko/Documents/GitHub/EnviroCar---Project-/index.Rmd")
trcol <- TracksCollection(list(A=track))
bb <- bbox(trcol)
stplot(trcol, xlim=bb[1,], ylim=bb[2,])
bb[1]
bb[3]
stplot(trcol, xlim=c(bb[1], bb[3]), ylim=c(bb[2], bb[4]))
stplot(trcol, xlab=c(bb[1], bb[3]), ylab=c(bb[2], bb[4]))
bb[4]
stplot(trcol, xlim=c(bb[1], bb[3]), ylim=c(bb[2], bb[4]))
stplot(trcol, xlim=c(bb[1], bb[3]), ylim=c(bb[2], bb[4]), col=1)
?stplot
stplot(trcol, xlim=c(7, 7.5), ylim=c(bb[2], bb[4]), col=1)
trcol <- TracksCollection(list(A=track))
bb <- bbox(trcol)
setMethod("stplot", "TracksCollection", function(obj, ..., mode = "byID") {
sp = obj@tracksCollection[[1]]@tracks[[1]]@sp
if (mode == "byID")
xyplot(lat ~ long, as(obj, "data.frame"), type = "l", groups = IDs,
asp = mapasp(sp), ...) else stop("no other modes implemented")
})
stplot(trcol)
library("lattice", lib.loc="D:/Program Files/R/R-3.1.1/library")
stplot(trcol)
header(trcol)
head(trcol)
slidify("C:/Users/Niko/Documents/GitHub/EnviroCar---Project-/index.Rmd")
library("slidifyLibraries", lib.loc="D:/Program Files/R/R-3.1.1/library")
slidify("C:/Users/Niko/Documents/GitHub/EnviroCar---Project-/index.Rmd")
library("slidify", lib.loc="D:/Program Files/R/R-3.1.1/library")
slidify("C:/Users/Niko/Documents/GitHub/EnviroCar---Project-/index.Rmd")
slidify("C:/Users/Niko/Documents/GitHub/EnviroCar---Project-/index.Rmd")
?slidify
slidify("C:/Users/Niko/Documents/GitHub/EnviroCar---Project-/index.Rmd")
slidify("C:/Users/Niko/Documents/GitHub/EnviroCar---Project-/index.Rmd")
slidify("C:/Users/Niko/Documents/GitHub/EnviroCar---Project-/index.Rmd")
slidify("C:/Users/Niko/Documents/GitHub/EnviroCar---Project-/index.Rmd")
slidify("C:/Users/Niko/Documents/GitHub/EnviroCar---Project-/index.Rmd")
slidify("C:/Users/Niko/Documents/GitHub/EnviroCar---Project-/index.Rmd")
require(enviroCaR)
require(fuzzyMM)
require(map3d)
require(knitr)
require(spacetime)
knit_hooks$set(rgl = hook_rgl)
```
```{r getTrack}
track <- importSingleTrack("https://envirocar.org/api/stable", "535e0898e4b0976b09bda467")
str(track)
trcol <- TracksCollection(list(A=track))
stplot(trcol)
data <- track@tracks[[1]]@data
track_sp <- track@tracks[[1]]@sp
track_sp <- SpatialPointsDataFrame(track_sp, data, proj4string=proj4string(track_sp), bbox=bbox(track_sp))
matched_track <- mm(track_sp, plot = TRUE)
drn <- create_drn(bbox(track_sp))
plot(coordinates(track_sp)[20:60,], col="blue", pch=16)
lines(drn@sl)
points(coordinates(matched_track)[20:60,], col="red", , pch=16)
plot(coordinates(track_sp)[1:40,], col="blue", pch=16)
lines(drn@sl)
points(coordinates(matched_track)[1:40,], col="red", , pch=16)
plot(coordinates(track_sp)[80:120,], col="blue", pch=16)
plot(coordinates(track_sp)[80:107,], col="blue", pch=16)
lines(drn@sl)
points(coordinates(matched_track)[80:107,], col="red", , pch=16)
plot(coordinates(track_sp)[60:90,], col="blue", pch=16)
lines(drn@sl)
points(coordinates(matched_track)[60:90,], col="red", , pch=16)
plot(coordinates(track_sp)[1:20,], col="blue", pch=16)
lines(drn@sl)
points(coordinates(matched_track)[1:20,], col="red", , pch=16)
track <- importSingleTrack("https://envirocar.org/api/stable", "537a6a65e4b008867f7d521e")
track <- importSingleTrack("https://envirocar.org/api/stable", "51e44857e4b0feb05dbf4d4d")
str(track)
track <- importSingleTrack("https://envirocar.org/api/stable", "521e1e8ee4b00a043c421784")
str(track)
track <- importSingleTrack("https://envirocar.org/api/stable", "52af4fe1e4b0593cce13cc37")
str(track)
trcol <- TracksCollection(list(A=track))
stplot(trcol)
data <- track@tracks[[1]]@data
track_sp <- track@tracks[[1]]@sp
track_sp <- SpatialPointsDataFrame(track_sp, data, proj4string=proj4string(track_sp), bbox=bbox(track_sp))
matched_track <- mm(track_sp, plot = TRUE)
plot(coordinates(track_sp)[1:20,], col="blue", pch=16)
lines(drn@sl)
points(coordinates(matched_track)[1:20,], col="red", , pch=16)
track <- importSingleTrack("https://envirocar.org/api/stable", "51c980c8e4b05956bbffcefd")
trcol <- TracksCollection(list(A=track))
stplot(trcol)
str(track)
track <- importSingleTrack("https://envirocar.org/api/stable", "545a1e8fe4b0b53890a2c1f3")
str(track)
trcol <- TracksCollection(list(A=track))
stplot(trcol)
data <- track@tracks[[1]]@data
track_sp <- track@tracks[[1]]@sp
track_sp <- SpatialPointsDataFrame(track_sp, data, proj4string=proj4string(track_sp), bbox=bbox(track_sp))
matched_track <- mm(track_sp, plot = TRUE)
drn <- create_drn(bbox(track_sp))
plot(coordinates(track_sp)[1:20,], col="blue", pch=16)
lines(drn@sl)
points(coordinates(matched_track)[1:20,], col="red", , pch=16)
plot(coordinates(track_sp)[10:40,], col="blue", pch=16)
lines(drn@sl)
points(coordinates(matched_track)[10:40,], col="red", , pch=16)
track <- importSingleTrack("https://envirocar.org/api/stable", "5360edfbe4b0976b09c0a496")
track <- importSingleTrack("https://envirocar.org/api/stable", "5315fb42e4b0b84b46a3deaa")
track <- importSingleTrack("https://envirocar.org/api/stable", "52de295ee4b0d8e8c1fcbd1c")
str(track)
trcol <- TracksCollection(list(A=track))
stplot(trcol)
data <- track@tracks[[1]]@data
track_sp <- track@tracks[[1]]@sp
track_sp <- SpatialPointsDataFrame(track_sp, data, proj4string=proj4string(track_sp), bbox=bbox(track_sp))
matched_track <- mm(track_sp, plot = TRUE)
track <- importSingleTrack("https://envirocar.org/api/stable", "537e2a7fe4b008867f7ea459")
track <- importSingleTrack("https://envirocar.org/api/stable", "537e2a7fe4b008867f7ea459")
track <- importSingleTrack("https://envirocar.org/api/stable", "53927ebde4b009adb03022c4")
str(track)
trcol <- TracksCollection(list(A=track))
stplot(trcol)
data <- track@tracks[[1]]@data
track_sp <- track@tracks[[1]]@sp
track_sp <- SpatialPointsDataFrame(track_sp, data, proj4string=proj4string(track_sp), bbox=bbox(track_sp))
matched_track <- mm(track_sp, plot = TRUE)
track <- importSingleTrack("https://envirocar.org/api/stable", "53927ebde4b009adb03022c4")
track <- importSingleTrack("https://envirocar.org/api/stable", "53341a43e4b09d7b342b1245")
track <- importSingleTrack("https://envirocar.org/api/stable", "5207b9f4e4b058cd3d6690a8")
track <- importSingleTrack("https://envirocar.org/api/stable", "52af4fd3e4b0593cce13bfc7")
str(track)
trcol <- TracksCollection(list(A=track))
stplot(trcol)
data <- track@tracks[[1]]@data
track_sp <- track@tracks[[1]]@sp
track_sp <- SpatialPointsDataFrame(track_sp, data, proj4string=proj4string(track_sp), bbox=bbox(track_sp))
matched_track <- mm(track_sp, plot = TRUE)
drn <- create_drn(bbox(track_sp))
plot(coordinates(track_sp)[10:40,], col="blue", pch=16)
lines(drn@sl)
points(coordinates(matched_track)[10:40,], col="red", , pch=16)
plot(coordinates(track_sp)[10:20,], col="blue", pch=16)
lines(drn@sl)
points(coordinates(matched_track)[10:20,], col="red", , pch=16)
plot(coordinates(track_sp)[10:30,], col="blue", pch=16)
lines(drn@sl)
points(coordinates(matched_track)[10:30,], col="red", , pch=16)
plot(coordinates(track_sp)[30:60,], col="blue", pch=16)
lines(drn@sl)
points(coordinates(matched_track)[30:60,], col="red", , pch=16)
plot(coordinates(track_sp)[60:90,], col="blue", pch=16)
lines(drn@sl)
points(coordinates(matched_track)[60:90,], col="red", , pch=16)
plot(coordinates(track_sp)[90:120,], col="blue", pch=16)
lines(drn@sl)
points(coordinates(matched_track)[90:120,], col="red", , pch=16)
plot(coordinates(track_sp)[1:25,], col="blue", pch=16)
lines(drn@sl)
points(coordinates(matched_track)[1:25,], col="red", , pch=16)
plot(coordinates(track_sp)[22:50,], col="blue", pch=16)
lines(drn@sl)
points(coordinates(matched_track)[22:50,], col="red", , pch=16)
plot(coordinates(track_sp)[1:20,], col="blue", pch=16)
lines(drn@sl)
points(coordinates(matched_track)[1:20,], col="red", , pch=16)
library("slidify", lib.loc="D:/Program Files/R/R-3.1.1/library")
library("slidifyLibraries", lib.loc="D:/Program Files/R/R-3.1.1/library")
setwd("~/GitHub/EnviroCar---Project-")
slidify("index.rmd")
slidify("index.rmd")
slidify("index.rmd")
slidify("index.rmd")
slidify("index.rmd")
slidify("index.rmd")
